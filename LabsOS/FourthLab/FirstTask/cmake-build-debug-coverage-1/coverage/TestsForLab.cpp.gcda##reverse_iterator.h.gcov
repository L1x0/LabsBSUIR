        -:    0:Source:/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.0.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h
        -:    0:Graph:/Users/artemastahov/All_files/styding/LabsBSUIR/LabsOS/FourthLab/FirstTask/cmake-build-debug-coverage-1/CMakeFiles/tests_for_lab.dir/TestsForLab.cpp.gcno
        -:    0:Data:/Users/artemastahov/All_files/styding/LabsBSUIR/LabsOS/FourthLab/FirstTask/cmake-build-debug-coverage-1/CMakeFiles/tests_for_lab.dir/TestsForLab.cpp.gcda
        -:    0:Runs:6
        -:    0:Programs:1
        -:    1:// -*- C++ -*-
        -:    2://===----------------------------------------------------------------------===//
        -:    3://
        -:    4:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    5:// See https://llvm.org/LICENSE.txt for license information.
        -:    6:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    7://
        -:    8://===----------------------------------------------------------------------===//
        -:    9:
        -:   10:#ifndef _LIBCPP___ITERATOR_REVERSE_ITERATOR_H
        -:   11:#define _LIBCPP___ITERATOR_REVERSE_ITERATOR_H
        -:   12:
        -:   13:#include <__algorithm/unwrap_iter.h>
        -:   14:#include <__compare/compare_three_way_result.h>
        -:   15:#include <__compare/three_way_comparable.h>
        -:   16:#include <__concepts/convertible_to.h>
        -:   17:#include <__config>
        -:   18:#include <__iterator/advance.h>
        -:   19:#include <__iterator/concepts.h>
        -:   20:#include <__iterator/incrementable_traits.h>
        -:   21:#include <__iterator/iter_move.h>
        -:   22:#include <__iterator/iter_swap.h>
        -:   23:#include <__iterator/iterator.h>
        -:   24:#include <__iterator/iterator_traits.h>
        -:   25:#include <__iterator/next.h>
        -:   26:#include <__iterator/prev.h>
        -:   27:#include <__iterator/readable_traits.h>
        -:   28:#include <__iterator/segmented_iterator.h>
        -:   29:#include <__memory/addressof.h>
        -:   30:#include <__ranges/access.h>
        -:   31:#include <__ranges/concepts.h>
        -:   32:#include <__ranges/subrange.h>
        -:   33:#include <__type_traits/conditional.h>
        -:   34:#include <__type_traits/enable_if.h>
        -:   35:#include <__type_traits/is_assignable.h>
        -:   36:#include <__type_traits/is_convertible.h>
        -:   37:#include <__type_traits/is_nothrow_copy_constructible.h>
        -:   38:#include <__type_traits/is_pointer.h>
        -:   39:#include <__type_traits/is_same.h>
        -:   40:#include <__utility/declval.h>
        -:   41:#include <__utility/move.h>
        -:   42:
        -:   43:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:   44:#  pragma GCC system_header
        -:   45:#endif
        -:   46:
        -:   47:_LIBCPP_BEGIN_NAMESPACE_STD
        -:   48:
        -:   49:_LIBCPP_SUPPRESS_DEPRECATED_PUSH
        -:   50:template <class _Iter>
        -:   51:class _LIBCPP_TEMPLATE_VIS reverse_iterator
        -:   52:#if _LIBCPP_STD_VER <= 14 || !defined(_LIBCPP_ABI_NO_ITERATOR_BASES)
        -:   53:    : public iterator<typename iterator_traits<_Iter>::iterator_category,
        -:   54:                      typename iterator_traits<_Iter>::value_type,
        -:   55:                      typename iterator_traits<_Iter>::difference_type,
        -:   56:                      typename iterator_traits<_Iter>::pointer,
        -:   57:                      typename iterator_traits<_Iter>::reference>
        -:   58:#endif
        -:   59:{
        -:   60:  _LIBCPP_SUPPRESS_DEPRECATED_POP
        -:   61:
        -:   62:private:
        -:   63:#ifndef _LIBCPP_ABI_NO_ITERATOR_BASES
        -:   64:  _Iter __t_; // no longer used as of LWG #2360, not removed due to ABI break
        -:   65:#endif
        -:   66:
        -:   67:#if _LIBCPP_STD_VER >= 20
        -:   68:  static_assert(__has_bidirectional_iterator_category<_Iter>::value || bidirectional_iterator<_Iter>,
        -:   69:                "reverse_iterator<It> requires It to be a bidirectional iterator.");
        -:   70:#endif // _LIBCPP_STD_VER >= 20
        -:   71:
        -:   72:protected:
        -:   73:  _Iter current;
        -:   74:
        -:   75:public:
        -:   76:  using iterator_type = _Iter;
        -:   77:
        -:   78:  using iterator_category =
        -:   79:      _If<__has_random_access_iterator_category<_Iter>::value,
        -:   80:          random_access_iterator_tag,
        -:   81:          typename iterator_traits<_Iter>::iterator_category>;
        -:   82:  using pointer = typename iterator_traits<_Iter>::pointer;
        -:   83:#if _LIBCPP_STD_VER >= 20
        -:   84:  using iterator_concept = _If<random_access_iterator<_Iter>, random_access_iterator_tag, bidirectional_iterator_tag>;
        -:   85:  using value_type       = iter_value_t<_Iter>;
        -:   86:  using difference_type  = iter_difference_t<_Iter>;
        -:   87:  using reference        = iter_reference_t<_Iter>;
        -:   88:#else
        -:   89:  using value_type      = typename iterator_traits<_Iter>::value_type;
        -:   90:  using difference_type = typename iterator_traits<_Iter>::difference_type;
        -:   91:  using reference       = typename iterator_traits<_Iter>::reference;
        -:   92:#endif
        -:   93:
        -:   94:#ifndef _LIBCPP_ABI_NO_ITERATOR_BASES
        -:   95:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 reverse_iterator() : __t_(), current() {}
        -:   96:
function _ZNSt3__116reverse_iteratorIPNS_4pairIPvmEEEC1B8ne180100ES4_ called 39 returned 100% blocks executed 100%
function _ZNSt3__116reverse_iteratorINS0_IPNS_4pairIPvmEEEEEC1B8ne180100ES5_ called 0 returned 0% blocks executed 0%
function _ZNSt3__116reverse_iteratorINS0_IPNS_4pairIPvmEEEEEC2B8ne180100ES5_ called 0 returned 0% blocks executed 0%
function _ZNSt3__116reverse_iteratorIPNS_4pairIPvmEEEC2B8ne180100ES4_ called 39 returned 100% blocks executed 100%
       78:   97:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 explicit reverse_iterator(_Iter __x) : __t_(__x), current(__x) {}
       39:   97-block  0
    $$$$$:   97-block  1
    $$$$$:   97-block  2
       39:   97-block  3
        -:   98:
        -:   99:  template <class _Up,
        -:  100:            class = __enable_if_t< !is_same<_Up, _Iter>::value && is_convertible<_Up const&, _Iter>::value > >
        -:  101:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 reverse_iterator(const reverse_iterator<_Up>& __u)
        -:  102:      : __t_(__u.base()), current(__u.base()) {}
        -:  103:
        -:  104:  template <class _Up,
        -:  105:            class = __enable_if_t< !is_same<_Up, _Iter>::value && is_convertible<_Up const&, _Iter>::value &&
        -:  106:                                   is_assignable<_Iter&, _Up const&>::value > >
        -:  107:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 reverse_iterator& operator=(const reverse_iterator<_Up>& __u) {
        -:  108:    __t_ = current = __u.base();
        -:  109:    return *this;
        -:  110:  }
        -:  111:#else
        -:  112:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 reverse_iterator() : current() {}
        -:  113:
        -:  114:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 explicit reverse_iterator(_Iter __x) : current(__x) {}
        -:  115:
        -:  116:  template <class _Up,
        -:  117:            class = __enable_if_t< !is_same<_Up, _Iter>::value && is_convertible<_Up const&, _Iter>::value > >
        -:  118:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 reverse_iterator(const reverse_iterator<_Up>& __u)
        -:  119:      : current(__u.base()) {}
        -:  120:
        -:  121:  template <class _Up,
        -:  122:            class = __enable_if_t< !is_same<_Up, _Iter>::value && is_convertible<_Up const&, _Iter>::value &&
        -:  123:                                   is_assignable<_Iter&, _Up const&>::value > >
        -:  124:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 reverse_iterator& operator=(const reverse_iterator<_Up>& __u) {
        -:  125:    current = __u.base();
        -:  126:    return *this;
        -:  127:  }
        -:  128:#endif
function _ZNKSt3__116reverse_iteratorIPNS_4pairIPvmEEE4baseB8ne180100Ev called 57 returned 100% blocks executed 100%
function _ZNKSt3__116reverse_iteratorINS0_IPNS_4pairIPvmEEEEE4baseB8ne180100Ev called 0 returned 0% blocks executed 0%
       57:  129:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 _Iter base() const { return current; }
       57:  129-block  0
    $$$$$:  129-block  1
function _ZNKSt3__116reverse_iteratorIPNS_4pairIPvmEEEdeB8ne180100Ev called 18 returned 100% blocks executed 100%
function _ZNKSt3__116reverse_iteratorINS0_IPNS_4pairIPvmEEEEEdeB8ne180100Ev called 0 returned 0% blocks executed 0%
       18:  130:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 reference operator*() const {
       18:  131:    _Iter __tmp = current;
       18:  132:    return *--__tmp;
       18:  132-block  0
    $$$$$:  132-block  1
        -:  133:  }
        -:  134:
        -:  135:#if _LIBCPP_STD_VER >= 20
        -:  136:  _LIBCPP_HIDE_FROM_ABI constexpr pointer operator->() const
        -:  137:    requires is_pointer_v<_Iter> || requires(const _Iter __i) { __i.operator->(); }
        -:  138:  {
        -:  139:    if constexpr (is_pointer_v<_Iter>) {
        -:  140:      return std::prev(current);
        -:  141:    } else {
        -:  142:      return std::prev(current).operator->();
        -:  143:    }
        -:  144:  }
        -:  145:#else
function _ZNKSt3__116reverse_iteratorIPNS_4pairIPvmEEEptB8ne180100Ev called 9 returned 100% blocks executed 100%
function _ZNKSt3__116reverse_iteratorINS0_IPNS_4pairIPvmEEEEEptB8ne180100Ev called 0 returned 0% blocks executed 0%
        9:  146:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 pointer operator->() const { return std::addressof(operator*()); }
        9:  146-block  0
    $$$$$:  146-block  1
        -:  147:#endif // _LIBCPP_STD_VER >= 20
        -:  148:
function _ZNSt3__116reverse_iteratorIPNS_4pairIPvmEEEppB8ne180100Ev called 18 returned 100% blocks executed 100%
function _ZNSt3__116reverse_iteratorINS0_IPNS_4pairIPvmEEEEEppB8ne180100Ev called 0 returned 0% blocks executed 0%
       18:  149:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 reverse_iterator& operator++() {
       18:  150:    --current;
       18:  151:    return *this;
       18:  151-block  0
    $$$$$:  151-block  1
        -:  152:  }
        -:  153:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 reverse_iterator operator++(int) {
        -:  154:    reverse_iterator __tmp(*this);
        -:  155:    --current;
        -:  156:    return __tmp;
        -:  157:  }
function _ZNSt3__116reverse_iteratorIPNS_4pairIPvmEEEmmB8ne180100Ev called 0 returned 0% blocks executed 0%
    #####:  158:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 reverse_iterator& operator--() {
    #####:  159:    ++current;
    #####:  160:    return *this;
    $$$$$:  160-block  0
        -:  161:  }
        -:  162:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 reverse_iterator operator--(int) {
        -:  163:    reverse_iterator __tmp(*this);
        -:  164:    ++current;
        -:  165:    return __tmp;
        -:  166:  }
        -:  167:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 reverse_iterator operator+(difference_type __n) const {
        -:  168:    return reverse_iterator(current - __n);
        -:  169:  }
        -:  170:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 reverse_iterator& operator+=(difference_type __n) {
        -:  171:    current -= __n;
        -:  172:    return *this;
        -:  173:  }
        -:  174:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 reverse_iterator operator-(difference_type __n) const {
        -:  175:    return reverse_iterator(current + __n);
        -:  176:  }
        -:  177:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 reverse_iterator& operator-=(difference_type __n) {
        -:  178:    current += __n;
        -:  179:    return *this;
        -:  180:  }
        -:  181:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 reference operator[](difference_type __n) const {
        -:  182:    return *(*this + __n);
        -:  183:  }
        -:  184:
        -:  185:#if _LIBCPP_STD_VER >= 20
        -:  186:  _LIBCPP_HIDE_FROM_ABI friend constexpr iter_rvalue_reference_t<_Iter> iter_move(const reverse_iterator& __i) noexcept(
        -:  187:      is_nothrow_copy_constructible_v<_Iter>&& noexcept(ranges::iter_move(--std::declval<_Iter&>()))) {
        -:  188:    auto __tmp = __i.base();
        -:  189:    return ranges::iter_move(--__tmp);
        -:  190:  }
        -:  191:
        -:  192:  template <indirectly_swappable<_Iter> _Iter2>
        -:  193:  _LIBCPP_HIDE_FROM_ABI friend constexpr void
        -:  194:  iter_swap(const reverse_iterator& __x, const reverse_iterator<_Iter2>& __y) noexcept(
        -:  195:      is_nothrow_copy_constructible_v<_Iter> &&
        -:  196:      is_nothrow_copy_constructible_v<_Iter2>&& noexcept(
        -:  197:          ranges::iter_swap(--std::declval<_Iter&>(), --std::declval<_Iter2&>()))) {
        -:  198:    auto __xtmp = __x.base();
        -:  199:    auto __ytmp = __y.base();
        -:  200:    ranges::iter_swap(--__xtmp, --__ytmp);
        -:  201:  }
        -:  202:#endif // _LIBCPP_STD_VER >= 20
        -:  203:};
        -:  204:
        -:  205:template <class _Iter1, class _Iter2>
        -:  206:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 bool
        -:  207:operator==(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
        -:  208:#if _LIBCPP_STD_VER >= 20
        -:  209:  requires requires {
        -:  210:    { __x.base() == __y.base() } -> convertible_to<bool>;
        -:  211:  }
        -:  212:#endif // _LIBCPP_STD_VER >= 20
        -:  213:{
        -:  214:  return __x.base() == __y.base();
        -:  215:}
        -:  216:
        -:  217:template <class _Iter1, class _Iter2>
        -:  218:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 bool
        -:  219:operator<(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
        -:  220:#if _LIBCPP_STD_VER >= 20
        -:  221:  requires requires {
        -:  222:    { __x.base() > __y.base() } -> convertible_to<bool>;
        -:  223:  }
        -:  224:#endif // _LIBCPP_STD_VER >= 20
        -:  225:{
        -:  226:  return __x.base() > __y.base();
        -:  227:}
        -:  228:
        -:  229:template <class _Iter1, class _Iter2>
        -:  230:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 bool
function _ZNSt3__1neB8ne180100IPNS_4pairIPvmEES4_EEbRKNS_16reverse_iteratorIT_EERKNS5_IT0_EE called 22 returned 100% blocks executed 100%
function _ZNSt3__1neB8ne180100INS_16reverse_iteratorIPNS_4pairIPvmEEEES6_EEbRKNS1_IT_EERKNS1_IT0_EE called 0 returned 0% blocks executed 0%
       22:  231:operator!=(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
        -:  232:#if _LIBCPP_STD_VER >= 20
        -:  233:  requires requires {
        -:  234:    { __x.base() != __y.base() } -> convertible_to<bool>;
        -:  235:  }
        -:  236:#endif // _LIBCPP_STD_VER >= 20
        -:  237:{
       22:  238:  return __x.base() != __y.base();
       22:  238-block  0
    $$$$$:  238-block  1
        -:  239:}
        -:  240:
        -:  241:template <class _Iter1, class _Iter2>
        -:  242:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 bool
        -:  243:operator>(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
        -:  244:#if _LIBCPP_STD_VER >= 20
        -:  245:  requires requires {
        -:  246:    { __x.base() < __y.base() } -> convertible_to<bool>;
        -:  247:  }
        -:  248:#endif // _LIBCPP_STD_VER >= 20
        -:  249:{
        -:  250:  return __x.base() < __y.base();
        -:  251:}
        -:  252:
        -:  253:template <class _Iter1, class _Iter2>
        -:  254:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 bool
        -:  255:operator>=(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
        -:  256:#if _LIBCPP_STD_VER >= 20
        -:  257:  requires requires {
        -:  258:    { __x.base() <= __y.base() } -> convertible_to<bool>;
        -:  259:  }
        -:  260:#endif // _LIBCPP_STD_VER >= 20
        -:  261:{
        -:  262:  return __x.base() <= __y.base();
        -:  263:}
        -:  264:
        -:  265:template <class _Iter1, class _Iter2>
        -:  266:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 bool
        -:  267:operator<=(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
        -:  268:#if _LIBCPP_STD_VER >= 20
        -:  269:  requires requires {
        -:  270:    { __x.base() >= __y.base() } -> convertible_to<bool>;
        -:  271:  }
        -:  272:#endif // _LIBCPP_STD_VER >= 20
        -:  273:{
        -:  274:  return __x.base() >= __y.base();
        -:  275:}
        -:  276:
        -:  277:#if _LIBCPP_STD_VER >= 20
        -:  278:template <class _Iter1, three_way_comparable_with<_Iter1> _Iter2>
        -:  279:_LIBCPP_HIDE_FROM_ABI constexpr compare_three_way_result_t<_Iter1, _Iter2>
        -:  280:operator<=>(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y) {
        -:  281:  return __y.base() <=> __x.base();
        -:  282:}
        -:  283:#endif // _LIBCPP_STD_VER >= 20
        -:  284:
        -:  285:#ifndef _LIBCPP_CXX03_LANG
        -:  286:template <class _Iter1, class _Iter2>
        -:  287:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 auto
        -:  288:operator-(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
        -:  289:    -> decltype(__y.base() - __x.base()) {
        -:  290:  return __y.base() - __x.base();
        -:  291:}
        -:  292:#else
        -:  293:template <class _Iter1, class _Iter2>
        -:  294:inline _LIBCPP_HIDE_FROM_ABI typename reverse_iterator<_Iter1>::difference_type
        -:  295:operator-(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y) {
        -:  296:  return __y.base() - __x.base();
        -:  297:}
        -:  298:#endif
        -:  299:
        -:  300:template <class _Iter>
        -:  301:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 reverse_iterator<_Iter>
        -:  302:operator+(typename reverse_iterator<_Iter>::difference_type __n, const reverse_iterator<_Iter>& __x) {
        -:  303:  return reverse_iterator<_Iter>(__x.base() - __n);
        -:  304:}
        -:  305:
        -:  306:#if _LIBCPP_STD_VER >= 20
        -:  307:template <class _Iter1, class _Iter2>
        -:  308:  requires(!sized_sentinel_for<_Iter1, _Iter2>)
        -:  309:inline constexpr bool disable_sized_sentinel_for<reverse_iterator<_Iter1>, reverse_iterator<_Iter2>> = true;
        -:  310:#endif // _LIBCPP_STD_VER >= 20
        -:  311:
        -:  312:#if _LIBCPP_STD_VER >= 14
        -:  313:template <class _Iter>
        -:  314:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 reverse_iterator<_Iter> make_reverse_iterator(_Iter __i) {
        -:  315:  return reverse_iterator<_Iter>(__i);
        -:  316:}
        -:  317:#endif
        -:  318:
        -:  319:#if _LIBCPP_STD_VER <= 17
        -:  320:template <class _Iter>
        -:  321:using __unconstrained_reverse_iterator = reverse_iterator<_Iter>;
        -:  322:#else
        -:  323:
        -:  324:// __unconstrained_reverse_iterator allows us to use reverse iterators in the implementation of algorithms by working
        -:  325:// around a language issue in C++20.
        -:  326:// In C++20, when a reverse iterator wraps certain C++20-hostile iterators, calling comparison operators on it will
        -:  327:// result in a compilation error. However, calling comparison operators on the pristine hostile iterator is not
        -:  328:// an error. Thus, we cannot use reverse_iterators in the implementation of an algorithm that accepts a
        -:  329:// C++20-hostile iterator. This class is an internal workaround -- it is a copy of reverse_iterator with
        -:  330:// tweaks to make it support hostile iterators.
        -:  331://
        -:  332:// A C++20-hostile iterator is one that defines a comparison operator where one of the arguments is an exact match
        -:  333:// and the other requires an implicit conversion, for example:
        -:  334://   friend bool operator==(const BaseIter&, const DerivedIter&);
        -:  335://
        -:  336:// C++20 rules for rewriting equality operators create another overload of this function with parameters reversed:
        -:  337://   friend bool operator==(const DerivedIter&, const BaseIter&);
        -:  338://
        -:  339:// This creates an ambiguity in overload resolution.
        -:  340://
        -:  341:// Clang treats this ambiguity differently in different contexts. When operator== is actually called in the function
        -:  342:// body, the code is accepted with a warning. When a concept requires operator== to be a valid expression, however,
        -:  343:// it evaluates to false. Thus, the implementation of reverse_iterator::operator== can actually call operator== on its
        -:  344:// base iterators, but the constraints on reverse_iterator::operator== prevent it from being considered during overload
        -:  345:// resolution. This class simply removes the problematic constraints from comparison functions.
        -:  346:template <class _Iter>
        -:  347:class __unconstrained_reverse_iterator {
        -:  348:  _Iter __iter_;
        -:  349:
        -:  350:public:
        -:  351:  static_assert(__has_bidirectional_iterator_category<_Iter>::value || bidirectional_iterator<_Iter>);
        -:  352:
        -:  353:  using iterator_type = _Iter;
        -:  354:  using iterator_category =
        -:  355:      _If<__has_random_access_iterator_category<_Iter>::value,
        -:  356:          random_access_iterator_tag,
        -:  357:          __iterator_category_type<_Iter>>;
        -:  358:  using pointer         = __iterator_pointer_type<_Iter>;
        -:  359:  using value_type      = iter_value_t<_Iter>;
        -:  360:  using difference_type = iter_difference_t<_Iter>;
        -:  361:  using reference       = iter_reference_t<_Iter>;
        -:  362:
        -:  363:  _LIBCPP_HIDE_FROM_ABI constexpr __unconstrained_reverse_iterator()                                        = default;
        -:  364:  _LIBCPP_HIDE_FROM_ABI constexpr __unconstrained_reverse_iterator(const __unconstrained_reverse_iterator&) = default;
        -:  365:  _LIBCPP_HIDE_FROM_ABI constexpr explicit __unconstrained_reverse_iterator(_Iter __iter) : __iter_(__iter) {}
        -:  366:
        -:  367:  _LIBCPP_HIDE_FROM_ABI constexpr _Iter base() const { return __iter_; }
        -:  368:  _LIBCPP_HIDE_FROM_ABI constexpr reference operator*() const {
        -:  369:    auto __tmp = __iter_;
        -:  370:    return *--__tmp;
        -:  371:  }
        -:  372:
        -:  373:  _LIBCPP_HIDE_FROM_ABI constexpr pointer operator->() const {
        -:  374:    if constexpr (is_pointer_v<_Iter>) {
        -:  375:      return std::prev(__iter_);
        -:  376:    } else {
        -:  377:      return std::prev(__iter_).operator->();
        -:  378:    }
        -:  379:  }
        -:  380:
        -:  381:  _LIBCPP_HIDE_FROM_ABI friend constexpr iter_rvalue_reference_t<_Iter>
        -:  382:  iter_move(const __unconstrained_reverse_iterator& __i) noexcept(
        -:  383:      is_nothrow_copy_constructible_v<_Iter>&& noexcept(ranges::iter_move(--std::declval<_Iter&>()))) {
        -:  384:    auto __tmp = __i.base();
        -:  385:    return ranges::iter_move(--__tmp);
        -:  386:  }
        -:  387:
        -:  388:  _LIBCPP_HIDE_FROM_ABI constexpr __unconstrained_reverse_iterator& operator++() {
        -:  389:    --__iter_;
        -:  390:    return *this;
        -:  391:  }
        -:  392:
        -:  393:  _LIBCPP_HIDE_FROM_ABI constexpr __unconstrained_reverse_iterator operator++(int) {
        -:  394:    auto __tmp = *this;
        -:  395:    --__iter_;
        -:  396:    return __tmp;
        -:  397:  }
        -:  398:
        -:  399:  _LIBCPP_HIDE_FROM_ABI constexpr __unconstrained_reverse_iterator& operator--() {
        -:  400:    ++__iter_;
        -:  401:    return *this;
        -:  402:  }
        -:  403:
        -:  404:  _LIBCPP_HIDE_FROM_ABI constexpr __unconstrained_reverse_iterator operator--(int) {
        -:  405:    auto __tmp = *this;
        -:  406:    ++__iter_;
        -:  407:    return __tmp;
        -:  408:  }
        -:  409:
        -:  410:  _LIBCPP_HIDE_FROM_ABI constexpr __unconstrained_reverse_iterator& operator+=(difference_type __n) {
        -:  411:    __iter_ -= __n;
        -:  412:    return *this;
        -:  413:  }
        -:  414:
        -:  415:  _LIBCPP_HIDE_FROM_ABI constexpr __unconstrained_reverse_iterator& operator-=(difference_type __n) {
        -:  416:    __iter_ += __n;
        -:  417:    return *this;
        -:  418:  }
        -:  419:
        -:  420:  _LIBCPP_HIDE_FROM_ABI constexpr __unconstrained_reverse_iterator operator+(difference_type __n) const {
        -:  421:    return __unconstrained_reverse_iterator(__iter_ - __n);
        -:  422:  }
        -:  423:
        -:  424:  _LIBCPP_HIDE_FROM_ABI constexpr __unconstrained_reverse_iterator operator-(difference_type __n) const {
        -:  425:    return __unconstrained_reverse_iterator(__iter_ + __n);
        -:  426:  }
        -:  427:
        -:  428:  _LIBCPP_HIDE_FROM_ABI constexpr difference_type operator-(const __unconstrained_reverse_iterator& __other) const {
        -:  429:    return __other.__iter_ - __iter_;
        -:  430:  }
        -:  431:
        -:  432:  _LIBCPP_HIDE_FROM_ABI constexpr auto operator[](difference_type __n) const { return *(*this + __n); }
        -:  433:
        -:  434:  // Deliberately unconstrained unlike the comparison functions in `reverse_iterator` -- see the class comment for the
        -:  435:  // rationale.
        -:  436:  _LIBCPP_HIDE_FROM_ABI friend constexpr bool
        -:  437:  operator==(const __unconstrained_reverse_iterator& __lhs, const __unconstrained_reverse_iterator& __rhs) {
        -:  438:    return __lhs.base() == __rhs.base();
        -:  439:  }
        -:  440:
        -:  441:  _LIBCPP_HIDE_FROM_ABI friend constexpr bool
        -:  442:  operator!=(const __unconstrained_reverse_iterator& __lhs, const __unconstrained_reverse_iterator& __rhs) {
        -:  443:    return __lhs.base() != __rhs.base();
        -:  444:  }
        -:  445:
        -:  446:  _LIBCPP_HIDE_FROM_ABI friend constexpr bool
        -:  447:  operator<(const __unconstrained_reverse_iterator& __lhs, const __unconstrained_reverse_iterator& __rhs) {
        -:  448:    return __lhs.base() > __rhs.base();
        -:  449:  }
        -:  450:
        -:  451:  _LIBCPP_HIDE_FROM_ABI friend constexpr bool
        -:  452:  operator>(const __unconstrained_reverse_iterator& __lhs, const __unconstrained_reverse_iterator& __rhs) {
        -:  453:    return __lhs.base() < __rhs.base();
        -:  454:  }
        -:  455:
        -:  456:  _LIBCPP_HIDE_FROM_ABI friend constexpr bool
        -:  457:  operator<=(const __unconstrained_reverse_iterator& __lhs, const __unconstrained_reverse_iterator& __rhs) {
        -:  458:    return __lhs.base() >= __rhs.base();
        -:  459:  }
        -:  460:
        -:  461:  _LIBCPP_HIDE_FROM_ABI friend constexpr bool
        -:  462:  operator>=(const __unconstrained_reverse_iterator& __lhs, const __unconstrained_reverse_iterator& __rhs) {
        -:  463:    return __lhs.base() <= __rhs.base();
        -:  464:  }
        -:  465:};
        -:  466:
        -:  467:#endif // _LIBCPP_STD_VER <= 17
        -:  468:
        -:  469:template <template <class> class _RevIter1, template <class> class _RevIter2, class _Iter>
        -:  470:struct __unwrap_reverse_iter_impl {
        -:  471:  using _UnwrappedIter  = decltype(__unwrap_iter_impl<_Iter>::__unwrap(std::declval<_Iter>()));
        -:  472:  using _ReverseWrapper = _RevIter1<_RevIter2<_Iter> >;
        -:  473:
        -:  474:  static _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _ReverseWrapper
        -:  475:  __rewrap(_ReverseWrapper __orig_iter, _UnwrappedIter __unwrapped_iter) {
        -:  476:    return _ReverseWrapper(
        -:  477:        _RevIter2<_Iter>(__unwrap_iter_impl<_Iter>::__rewrap(__orig_iter.base().base(), __unwrapped_iter)));
        -:  478:  }
        -:  479:
        -:  480:  static _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _UnwrappedIter __unwrap(_ReverseWrapper __i) _NOEXCEPT {
        -:  481:    return __unwrap_iter_impl<_Iter>::__unwrap(__i.base().base());
        -:  482:  }
        -:  483:};
        -:  484:
        -:  485:#if _LIBCPP_STD_VER >= 20
        -:  486:template <ranges::bidirectional_range _Range>
        -:  487:_LIBCPP_HIDE_FROM_ABI constexpr ranges::subrange<reverse_iterator<ranges::iterator_t<_Range>>,
        -:  488:                                                 reverse_iterator<ranges::iterator_t<_Range>>>
        -:  489:__reverse_range(_Range&& __range) {
        -:  490:  auto __first = ranges::begin(__range);
        -:  491:  return {std::make_reverse_iterator(ranges::next(__first, ranges::end(__range))), std::make_reverse_iterator(__first)};
        -:  492:}
        -:  493:#endif
        -:  494:
        -:  495:template <class _Iter, bool __b>
        -:  496:struct __unwrap_iter_impl<reverse_iterator<reverse_iterator<_Iter> >, __b>
        -:  497:    : __unwrap_reverse_iter_impl<reverse_iterator, reverse_iterator, _Iter> {};
        -:  498:
        -:  499:#if _LIBCPP_STD_VER >= 20
        -:  500:
        -:  501:template <class _Iter, bool __b>
        -:  502:struct __unwrap_iter_impl<reverse_iterator<__unconstrained_reverse_iterator<_Iter>>, __b>
        -:  503:    : __unwrap_reverse_iter_impl<reverse_iterator, __unconstrained_reverse_iterator, _Iter> {};
        -:  504:
        -:  505:template <class _Iter, bool __b>
        -:  506:struct __unwrap_iter_impl<__unconstrained_reverse_iterator<reverse_iterator<_Iter>>, __b>
        -:  507:    : __unwrap_reverse_iter_impl<__unconstrained_reverse_iterator, reverse_iterator, _Iter> {};
        -:  508:
        -:  509:template <class _Iter, bool __b>
        -:  510:struct __unwrap_iter_impl<__unconstrained_reverse_iterator<__unconstrained_reverse_iterator<_Iter>>, __b>
        -:  511:    : __unwrap_reverse_iter_impl<__unconstrained_reverse_iterator, __unconstrained_reverse_iterator, _Iter> {};
        -:  512:
        -:  513:#endif // _LIBCPP_STD_VER >= 20
        -:  514:
        -:  515:_LIBCPP_END_NAMESPACE_STD
        -:  516:
        -:  517:#endif // _LIBCPP___ITERATOR_REVERSE_ITERATOR_H
