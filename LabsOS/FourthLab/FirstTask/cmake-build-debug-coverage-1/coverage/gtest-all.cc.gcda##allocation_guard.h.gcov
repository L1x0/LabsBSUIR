        -:    0:Source:/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.0.sdk/usr/include/c++/v1/__memory/allocation_guard.h
        -:    0:Graph:/Users/artemastahov/All_files/styding/LabsBSUIR/LabsOS/FourthLab/FirstTask/cmake-build-debug-coverage-1/googletest/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcno
        -:    0:Data:/Users/artemastahov/All_files/styding/LabsBSUIR/LabsOS/FourthLab/FirstTask/cmake-build-debug-coverage-1/googletest/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// -*- C++ -*-
        -:    2://===----------------------------------------------------------------------===//
        -:    3://
        -:    4:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    5:// See https://llvm.org/LICENSE.txt for license information.
        -:    6:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    7://
        -:    8://===----------------------------------------------------------------------===//
        -:    9:
        -:   10:#ifndef _LIBCPP___MEMORY_ALLOCATION_GUARD_H
        -:   11:#define _LIBCPP___MEMORY_ALLOCATION_GUARD_H
        -:   12:
        -:   13:#include <__config>
        -:   14:#include <__memory/addressof.h>
        -:   15:#include <__memory/allocator_traits.h>
        -:   16:#include <__utility/move.h>
        -:   17:#include <cstddef>
        -:   18:
        -:   19:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:   20:#  pragma GCC system_header
        -:   21:#endif
        -:   22:
        -:   23:_LIBCPP_PUSH_MACROS
        -:   24:#include <__undef_macros>
        -:   25:
        -:   26:_LIBCPP_BEGIN_NAMESPACE_STD
        -:   27:
        -:   28:// Helper class to allocate memory using an Allocator in an exception safe
        -:   29:// manner.
        -:   30://
        -:   31:// The intended usage of this class is as follows:
        -:   32://
        -:   33:// 0
        -:   34:// 1     __allocation_guard<SomeAllocator> guard(alloc, 10);
        -:   35:// 2     do_some_initialization_that_may_throw(guard.__get());
        -:   36:// 3     save_allocated_pointer_in_a_noexcept_operation(guard.__release_ptr());
        -:   37:// 4
        -:   38://
        -:   39:// If line (2) throws an exception during initialization of the memory, the
        -:   40:// guard's destructor will be called, and the memory will be released using
        -:   41:// Allocator deallocation. Otherwise, we release the memory from the guard on
        -:   42:// line (3) in an operation that can't throw -- after that, the guard is not
        -:   43:// responsible for the memory anymore.
        -:   44://
        -:   45:// This is similar to a unique_ptr, except it's easier to use with a
        -:   46:// custom allocator.
        -:   47:template <class _Alloc>
        -:   48:struct __allocation_guard {
        -:   49:  using _Pointer = typename allocator_traits<_Alloc>::pointer;
        -:   50:  using _Size    = typename allocator_traits<_Alloc>::size_type;
        -:   51:
        -:   52:  template <class _AllocT> // we perform the allocator conversion inside the constructor
function _ZNSt3__118__allocation_guardINS_9allocatorINS_11__list_nodeINS_4pairIcPKcEEPvEEEEEC1B8ne180100IS9_EET_m called 0 returned 0% blocks executed 0%
function _ZNSt3__118__allocation_guardINS_9allocatorINS_11__list_nodeINS_4pairIcPKcEEPvEEEEEC2B8ne180100IS9_EET_m called 0 returned 0% blocks executed 0%
    #####:   53:  _LIBCPP_HIDE_FROM_ABI explicit __allocation_guard(_AllocT __alloc, _Size __n)
    #####:   54:      : __alloc_(std::move(__alloc)),
    #####:   55:        __n_(__n),
    #####:   56:        __ptr_(allocator_traits<_Alloc>::allocate(__alloc_, __n_)) // initialization order is important
    #####:   57:  {}
    $$$$$:   57-block  0
    $$$$$:   57-block  1
        -:   58:
function _ZNSt3__118__allocation_guardINS_9allocatorINS_11__list_nodeINS_4pairIcPKcEEPvEEEEED1B8ne180100Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__118__allocation_guardINS_9allocatorINS_11__list_nodeINS_4pairIcPKcEEPvEEEEED2B8ne180100Ev called 0 returned 0% blocks executed 0%
    #####:   59:  _LIBCPP_HIDE_FROM_ABI ~__allocation_guard() _NOEXCEPT { __destroy(); }
    $$$$$:   59-block  0
    $$$$$:   59-block  1
        -:   60:
        -:   61:  _LIBCPP_HIDE_FROM_ABI __allocation_guard(const __allocation_guard&) = delete;
        -:   62:  _LIBCPP_HIDE_FROM_ABI __allocation_guard(__allocation_guard&& __other) _NOEXCEPT
        -:   63:      : __alloc_(std::move(__other.__alloc_)),
        -:   64:        __n_(__other.__n_),
        -:   65:        __ptr_(__other.__ptr_) {
        -:   66:    __other.__ptr_ = nullptr;
        -:   67:  }
        -:   68:
        -:   69:  _LIBCPP_HIDE_FROM_ABI __allocation_guard& operator=(const __allocation_guard& __other) = delete;
        -:   70:  _LIBCPP_HIDE_FROM_ABI __allocation_guard& operator=(__allocation_guard&& __other) _NOEXCEPT {
        -:   71:    if (std::addressof(__other) != this) {
        -:   72:      __destroy();
        -:   73:
        -:   74:      __alloc_       = std::move(__other.__alloc_);
        -:   75:      __n_           = __other.__n_;
        -:   76:      __ptr_         = __other.__ptr_;
        -:   77:      __other.__ptr_ = nullptr;
        -:   78:    }
        -:   79:
        -:   80:    return *this;
        -:   81:  }
        -:   82:
        -:   83:  _LIBCPP_HIDE_FROM_ABI _Pointer
function _ZNSt3__118__allocation_guardINS_9allocatorINS_11__list_nodeINS_4pairIcPKcEEPvEEEEE13__release_ptrB8ne180100Ev called 0 returned 0% blocks executed 0%
    #####:   84:  __release_ptr() _NOEXCEPT { // not called __release() because it's a keyword in objective-c++
    #####:   85:    _Pointer __tmp = __ptr_;
    #####:   86:    __ptr_         = nullptr;
    #####:   87:    return __tmp;
    $$$$$:   87-block  0
        -:   88:  }
        -:   89:
function _ZNKSt3__118__allocation_guardINS_9allocatorINS_11__list_nodeINS_4pairIcPKcEEPvEEEEE5__getB8ne180100Ev called 0 returned 0% blocks executed 0%
    #####:   90:  _LIBCPP_HIDE_FROM_ABI _Pointer __get() const _NOEXCEPT { return __ptr_; }
    $$$$$:   90-block  0
        -:   91:
        -:   92:private:
function _ZNSt3__118__allocation_guardINS_9allocatorINS_11__list_nodeINS_4pairIcPKcEEPvEEEEE9__destroyB8ne180100Ev called 0 returned 0% blocks executed 0%
    #####:   93:  _LIBCPP_HIDE_FROM_ABI void __destroy() _NOEXCEPT {
    #####:   94:    if (__ptr_ != nullptr) {
    $$$$$:   94-block  0
    $$$$$:   94-block  1
    #####:   95:      allocator_traits<_Alloc>::deallocate(__alloc_, __ptr_, __n_);
    #####:   96:    }
    $$$$$:   96-block  0
    #####:   97:  }
    $$$$$:   97-block  0
        -:   98:
        -:   99:  _Alloc __alloc_;
        -:  100:  _Size __n_;
        -:  101:  _Pointer __ptr_;
        -:  102:};
        -:  103:
        -:  104:_LIBCPP_END_NAMESPACE_STD
        -:  105:
        -:  106:_LIBCPP_POP_MACROS
        -:  107:
        -:  108:#endif // _LIBCPP___MEMORY_ALLOCATION_GUARD_H
