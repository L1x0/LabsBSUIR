        -:    0:Source:/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.0.sdk/usr/include/c++/v1/stdexcept
        -:    0:Graph:/Users/artemastahov/All_files/styding/LabsBSUIR/LabsOS/FourthLab/FirstTask/cmake-build-debug-coverage-1/googletest/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcno
        -:    0:Data:/Users/artemastahov/All_files/styding/LabsBSUIR/LabsOS/FourthLab/FirstTask/cmake-build-debug-coverage-1/googletest/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// -*- C++ -*-
        -:    2://===----------------------------------------------------------------------===//
        -:    3://
        -:    4:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    5:// See https://llvm.org/LICENSE.txt for license information.
        -:    6:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    7://
        -:    8://===----------------------------------------------------------------------===//
        -:    9:
        -:   10:#ifndef _LIBCPP_STDEXCEPT
        -:   11:#define _LIBCPP_STDEXCEPT
        -:   12:
        -:   13:/*
        -:   14:    stdexcept synopsis
        -:   15:
        -:   16:namespace std
        -:   17:{
        -:   18:
        -:   19:class logic_error;
        -:   20:    class domain_error;
        -:   21:    class invalid_argument;
        -:   22:    class length_error;
        -:   23:    class out_of_range;
        -:   24:class runtime_error;
        -:   25:    class range_error;
        -:   26:    class overflow_error;
        -:   27:    class underflow_error;
        -:   28:
        -:   29:for each class xxx_error:
        -:   30:
        -:   31:class xxx_error : public exception // at least indirectly
        -:   32:{
        -:   33:public:
        -:   34:    explicit xxx_error(const string& what_arg);
        -:   35:    explicit xxx_error(const char*   what_arg);
        -:   36:
        -:   37:    virtual const char* what() const noexcept // returns what_arg
        -:   38:};
        -:   39:
        -:   40:}  // std
        -:   41:
        -:   42:*/
        -:   43:
        -:   44:#include <__assert> // all public C++ headers provide the assertion handler
        -:   45:#include <__config>
        -:   46:#include <__exception/exception.h>
        -:   47:#include <__fwd/string.h>
        -:   48:#include <__verbose_abort>
        -:   49:#include <stdlib.h>
        -:   50:
        -:   51:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:   52:#  pragma GCC system_header
        -:   53:#endif
        -:   54:
        -:   55:_LIBCPP_BEGIN_NAMESPACE_STD
        -:   56:
        -:   57:#ifndef _LIBCPP_ABI_VCRUNTIME
        -:   58:class _LIBCPP_HIDDEN __libcpp_refstring {
        -:   59:  const char* __imp_;
        -:   60:
        -:   61:  bool __uses_refcount() const;
        -:   62:
        -:   63:public:
        -:   64:  explicit __libcpp_refstring(const char* __msg);
        -:   65:  __libcpp_refstring(const __libcpp_refstring& __s) _NOEXCEPT;
        -:   66:  __libcpp_refstring& operator=(const __libcpp_refstring& __s) _NOEXCEPT;
        -:   67:  ~__libcpp_refstring();
        -:   68:
        -:   69:  _LIBCPP_HIDE_FROM_ABI const char* c_str() const _NOEXCEPT { return __imp_; }
        -:   70:};
        -:   71:#endif // !_LIBCPP_ABI_VCRUNTIME
        -:   72:
        -:   73:_LIBCPP_END_NAMESPACE_STD
        -:   74:
        -:   75:namespace std // purposefully not using versioning namespace
        -:   76:{
        -:   77:
        -:   78:class _LIBCPP_EXPORTED_FROM_ABI logic_error : public exception {
        -:   79:#ifndef _LIBCPP_ABI_VCRUNTIME
        -:   80:
        -:   81:private:
        -:   82:  std::__libcpp_refstring __imp_;
        -:   83:
        -:   84:public:
        -:   85:  explicit logic_error(const string&);
        -:   86:  explicit logic_error(const char*);
        -:   87:
        -:   88:  logic_error(const logic_error&) _NOEXCEPT;
        -:   89:  logic_error& operator=(const logic_error&) _NOEXCEPT;
        -:   90:
        -:   91:  ~logic_error() _NOEXCEPT override;
        -:   92:
        -:   93:  const char* what() const _NOEXCEPT override;
        -:   94:#else
        -:   95:
        -:   96:public:
        -:   97:  explicit logic_error(const std::string&); // Symbol uses versioned std::string
        -:   98:  _LIBCPP_HIDE_FROM_ABI explicit logic_error(const char* __s) : exception(__s) {}
        -:   99:#endif
        -:  100:};
        -:  101:
        -:  102:class _LIBCPP_EXPORTED_FROM_ABI runtime_error : public exception {
        -:  103:#ifndef _LIBCPP_ABI_VCRUNTIME
        -:  104:
        -:  105:private:
        -:  106:  std::__libcpp_refstring __imp_;
        -:  107:
        -:  108:public:
        -:  109:  explicit runtime_error(const string&);
        -:  110:  explicit runtime_error(const char*);
        -:  111:
        -:  112:  runtime_error(const runtime_error&) _NOEXCEPT;
        -:  113:  runtime_error& operator=(const runtime_error&) _NOEXCEPT;
        -:  114:
        -:  115:  ~runtime_error() _NOEXCEPT override;
        -:  116:
        -:  117:  const char* what() const _NOEXCEPT override;
        -:  118:#else
        -:  119:
        -:  120:public:
        -:  121:  explicit runtime_error(const std::string&); // Symbol uses versioned std::string
        -:  122:  _LIBCPP_HIDE_FROM_ABI explicit runtime_error(const char* __s) : exception(__s) {}
        -:  123:#endif // _LIBCPP_ABI_VCRUNTIME
        -:  124:};
        -:  125:
        -:  126:class _LIBCPP_EXPORTED_FROM_ABI domain_error : public logic_error {
        -:  127:public:
        -:  128:  _LIBCPP_HIDE_FROM_ABI explicit domain_error(const string& __s) : logic_error(__s) {}
        -:  129:  _LIBCPP_HIDE_FROM_ABI explicit domain_error(const char* __s) : logic_error(__s) {}
        -:  130:
        -:  131:#ifndef _LIBCPP_ABI_VCRUNTIME
        -:  132:  _LIBCPP_HIDE_FROM_ABI domain_error(const domain_error&) _NOEXCEPT            = default;
        -:  133:  _LIBCPP_HIDE_FROM_ABI domain_error& operator=(const domain_error&) _NOEXCEPT = default;
        -:  134:  ~domain_error() _NOEXCEPT override;
        -:  135:#endif
        -:  136:};
        -:  137:
        -:  138:class _LIBCPP_EXPORTED_FROM_ABI invalid_argument : public logic_error {
        -:  139:public:
        -:  140:  _LIBCPP_HIDE_FROM_ABI explicit invalid_argument(const string& __s) : logic_error(__s) {}
        -:  141:  _LIBCPP_HIDE_FROM_ABI explicit invalid_argument(const char* __s) : logic_error(__s) {}
        -:  142:
        -:  143:#ifndef _LIBCPP_ABI_VCRUNTIME
        -:  144:  _LIBCPP_HIDE_FROM_ABI invalid_argument(const invalid_argument&) _NOEXCEPT            = default;
        -:  145:  _LIBCPP_HIDE_FROM_ABI invalid_argument& operator=(const invalid_argument&) _NOEXCEPT = default;
        -:  146:  ~invalid_argument() _NOEXCEPT override;
        -:  147:#endif
        -:  148:};
        -:  149:
        -:  150:class _LIBCPP_EXPORTED_FROM_ABI length_error : public logic_error {
        -:  151:public:
        -:  152:  _LIBCPP_HIDE_FROM_ABI explicit length_error(const string& __s) : logic_error(__s) {}
function _ZNSt12length_errorC1B8ne180100EPKc called 0 returned 0% blocks executed 0%
function _ZNSt12length_errorC2B8ne180100EPKc called 0 returned 0% blocks executed 0%
    #####:  153:  _LIBCPP_HIDE_FROM_ABI explicit length_error(const char* __s) : logic_error(__s) {}
    $$$$$:  153-block  0
    $$$$$:  153-block  1
        -:  154:#ifndef _LIBCPP_ABI_VCRUNTIME
        -:  155:  _LIBCPP_HIDE_FROM_ABI length_error(const length_error&) _NOEXCEPT            = default;
        -:  156:  _LIBCPP_HIDE_FROM_ABI length_error& operator=(const length_error&) _NOEXCEPT = default;
        -:  157:  ~length_error() _NOEXCEPT override;
        -:  158:#endif
        -:  159:};
        -:  160:
        -:  161:class _LIBCPP_EXPORTED_FROM_ABI out_of_range : public logic_error {
        -:  162:public:
        -:  163:  _LIBCPP_HIDE_FROM_ABI explicit out_of_range(const string& __s) : logic_error(__s) {}
function _ZNSt12out_of_rangeC1B8ne180100EPKc called 0 returned 0% blocks executed 0%
function _ZNSt12out_of_rangeC2B8ne180100EPKc called 0 returned 0% blocks executed 0%
    #####:  164:  _LIBCPP_HIDE_FROM_ABI explicit out_of_range(const char* __s) : logic_error(__s) {}
    $$$$$:  164-block  0
    $$$$$:  164-block  1
        -:  165:
        -:  166:#ifndef _LIBCPP_ABI_VCRUNTIME
        -:  167:  _LIBCPP_HIDE_FROM_ABI out_of_range(const out_of_range&) _NOEXCEPT            = default;
        -:  168:  _LIBCPP_HIDE_FROM_ABI out_of_range& operator=(const out_of_range&) _NOEXCEPT = default;
        -:  169:  ~out_of_range() _NOEXCEPT override;
        -:  170:#endif
        -:  171:};
        -:  172:
        -:  173:class _LIBCPP_EXPORTED_FROM_ABI range_error : public runtime_error {
        -:  174:public:
        -:  175:  _LIBCPP_HIDE_FROM_ABI explicit range_error(const string& __s) : runtime_error(__s) {}
        -:  176:  _LIBCPP_HIDE_FROM_ABI explicit range_error(const char* __s) : runtime_error(__s) {}
        -:  177:
        -:  178:#ifndef _LIBCPP_ABI_VCRUNTIME
        -:  179:  _LIBCPP_HIDE_FROM_ABI range_error(const range_error&) _NOEXCEPT            = default;
        -:  180:  _LIBCPP_HIDE_FROM_ABI range_error& operator=(const range_error&) _NOEXCEPT = default;
        -:  181:  ~range_error() _NOEXCEPT override;
        -:  182:#endif
        -:  183:};
        -:  184:
        -:  185:class _LIBCPP_EXPORTED_FROM_ABI overflow_error : public runtime_error {
        -:  186:public:
        -:  187:  _LIBCPP_HIDE_FROM_ABI explicit overflow_error(const string& __s) : runtime_error(__s) {}
        -:  188:  _LIBCPP_HIDE_FROM_ABI explicit overflow_error(const char* __s) : runtime_error(__s) {}
        -:  189:
        -:  190:#ifndef _LIBCPP_ABI_VCRUNTIME
        -:  191:  _LIBCPP_HIDE_FROM_ABI overflow_error(const overflow_error&) _NOEXCEPT            = default;
        -:  192:  _LIBCPP_HIDE_FROM_ABI overflow_error& operator=(const overflow_error&) _NOEXCEPT = default;
        -:  193:  ~overflow_error() _NOEXCEPT override;
        -:  194:#endif
        -:  195:};
        -:  196:
        -:  197:class _LIBCPP_EXPORTED_FROM_ABI underflow_error : public runtime_error {
        -:  198:public:
        -:  199:  _LIBCPP_HIDE_FROM_ABI explicit underflow_error(const string& __s) : runtime_error(__s) {}
        -:  200:  _LIBCPP_HIDE_FROM_ABI explicit underflow_error(const char* __s) : runtime_error(__s) {}
        -:  201:
        -:  202:#ifndef _LIBCPP_ABI_VCRUNTIME
        -:  203:  _LIBCPP_HIDE_FROM_ABI underflow_error(const underflow_error&) _NOEXCEPT            = default;
        -:  204:  _LIBCPP_HIDE_FROM_ABI underflow_error& operator=(const underflow_error&) _NOEXCEPT = default;
        -:  205:  ~underflow_error() _NOEXCEPT override;
        -:  206:#endif
        -:  207:};
        -:  208:
        -:  209:} // namespace std
        -:  210:
        -:  211:_LIBCPP_BEGIN_NAMESPACE_STD
        -:  212:
        -:  213:// in the dylib
        -:  214:_LIBCPP_NORETURN _LIBCPP_EXPORTED_FROM_ABI void __throw_runtime_error(const char*);
        -:  215:
        -:  216:_LIBCPP_NORETURN inline _LIBCPP_HIDE_FROM_ABI void __throw_logic_error(const char* __msg) {
        -:  217:#ifndef _LIBCPP_HAS_NO_EXCEPTIONS
        -:  218:  throw logic_error(__msg);
        -:  219:#else
        -:  220:  _LIBCPP_VERBOSE_ABORT("logic_error was thrown in -fno-exceptions mode with message \"%s\"", __msg);
        -:  221:#endif
        -:  222:}
        -:  223:
        -:  224:_LIBCPP_NORETURN inline _LIBCPP_HIDE_FROM_ABI void __throw_domain_error(const char* __msg) {
        -:  225:#ifndef _LIBCPP_HAS_NO_EXCEPTIONS
        -:  226:  throw domain_error(__msg);
        -:  227:#else
        -:  228:  _LIBCPP_VERBOSE_ABORT("domain_error was thrown in -fno-exceptions mode with message \"%s\"", __msg);
        -:  229:#endif
        -:  230:}
        -:  231:
        -:  232:_LIBCPP_NORETURN inline _LIBCPP_HIDE_FROM_ABI void __throw_invalid_argument(const char* __msg) {
        -:  233:#ifndef _LIBCPP_HAS_NO_EXCEPTIONS
        -:  234:  throw invalid_argument(__msg);
        -:  235:#else
        -:  236:  _LIBCPP_VERBOSE_ABORT("invalid_argument was thrown in -fno-exceptions mode with message \"%s\"", __msg);
        -:  237:#endif
        -:  238:}
        -:  239:
function _ZNSt3__120__throw_length_errorB8ne180100EPKc called 0 returned 0% blocks executed 0%
    #####:  240:_LIBCPP_NORETURN inline _LIBCPP_HIDE_FROM_ABI void __throw_length_error(const char* __msg) {
        -:  241:#ifndef _LIBCPP_HAS_NO_EXCEPTIONS
    #####:  242:  throw length_error(__msg);
    $$$$$:  242-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  242-block  1
    $$$$$:  242-block  2
    $$$$$:  242-block  3
        -:  243:#else
        -:  244:  (void)__msg;
        -:  245:  // Work around to prevent having to link against libc++.dylib. While all users should be
        -:  246:  // linking against it, in practice this can be tricky and can require a migration period.
        -:  247:  ::abort();
        -:  248:#endif
    #####:  249:}
        -:  250:
function _ZNSt3__120__throw_out_of_rangeB8ne180100EPKc called 0 returned 0% blocks executed 0%
    #####:  251:_LIBCPP_NORETURN inline _LIBCPP_HIDE_FROM_ABI void __throw_out_of_range(const char* __msg) {
        -:  252:#ifndef _LIBCPP_HAS_NO_EXCEPTIONS
    #####:  253:  throw out_of_range(__msg);
    $$$$$:  253-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  253-block  1
    $$$$$:  253-block  2
    $$$$$:  253-block  3
        -:  254:#else
        -:  255:  (void)__msg;
        -:  256:  // Work around to prevent having to link against libc++.dylib. While all users should be
        -:  257:  // linking against it, in practice this can be tricky and can require a migration period.
        -:  258:  ::abort();
        -:  259:#endif
    #####:  260:}
        -:  261:
        -:  262:_LIBCPP_NORETURN inline _LIBCPP_HIDE_FROM_ABI void __throw_range_error(const char* __msg) {
        -:  263:#ifndef _LIBCPP_HAS_NO_EXCEPTIONS
        -:  264:  throw range_error(__msg);
        -:  265:#else
        -:  266:  _LIBCPP_VERBOSE_ABORT("range_error was thrown in -fno-exceptions mode with message \"%s\"", __msg);
        -:  267:#endif
        -:  268:}
        -:  269:
        -:  270:_LIBCPP_NORETURN inline _LIBCPP_HIDE_FROM_ABI void __throw_overflow_error(const char* __msg) {
        -:  271:#ifndef _LIBCPP_HAS_NO_EXCEPTIONS
        -:  272:  throw overflow_error(__msg);
        -:  273:#else
        -:  274:  _LIBCPP_VERBOSE_ABORT("overflow_error was thrown in -fno-exceptions mode with message \"%s\"", __msg);
        -:  275:#endif
        -:  276:}
        -:  277:
        -:  278:_LIBCPP_NORETURN inline _LIBCPP_HIDE_FROM_ABI void __throw_underflow_error(const char* __msg) {
        -:  279:#ifndef _LIBCPP_HAS_NO_EXCEPTIONS
        -:  280:  throw underflow_error(__msg);
        -:  281:#else
        -:  282:  _LIBCPP_VERBOSE_ABORT("underflow_error was thrown in -fno-exceptions mode with message \"%s\"", __msg);
        -:  283:#endif
        -:  284:}
        -:  285:
        -:  286:_LIBCPP_END_NAMESPACE_STD
        -:  287:
        -:  288:#if !defined(_LIBCPP_REMOVE_TRANSITIVE_INCLUDES) && _LIBCPP_STD_VER <= 20
        -:  289:#  include <cstdlib>
        -:  290:#  include <exception>
        -:  291:#  include <iosfwd>
        -:  292:#endif
        -:  293:
        -:  294:#endif // _LIBCPP_STDEXCEPT
