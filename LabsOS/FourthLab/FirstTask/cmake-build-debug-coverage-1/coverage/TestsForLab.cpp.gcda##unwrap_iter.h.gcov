        -:    0:Source:/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.0.sdk/usr/include/c++/v1/__algorithm/unwrap_iter.h
        -:    0:Graph:/Users/artemastahov/All_files/styding/LabsBSUIR/LabsOS/FourthLab/FirstTask/cmake-build-debug-coverage-1/CMakeFiles/tests_for_lab.dir/TestsForLab.cpp.gcno
        -:    0:Data:/Users/artemastahov/All_files/styding/LabsBSUIR/LabsOS/FourthLab/FirstTask/cmake-build-debug-coverage-1/CMakeFiles/tests_for_lab.dir/TestsForLab.cpp.gcda
        -:    0:Runs:6
        -:    0:Programs:1
        -:    1://===----------------------------------------------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#ifndef _LIBCPP___ALGORITHM_UNWRAP_ITER_H
        -:   10:#define _LIBCPP___ALGORITHM_UNWRAP_ITER_H
        -:   11:
        -:   12:#include <__config>
        -:   13:#include <__iterator/iterator_traits.h>
        -:   14:#include <__memory/pointer_traits.h>
        -:   15:#include <__type_traits/enable_if.h>
        -:   16:#include <__type_traits/is_copy_constructible.h>
        -:   17:#include <__utility/declval.h>
        -:   18:#include <__utility/move.h>
        -:   19:
        -:   20:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:   21:#  pragma GCC system_header
        -:   22:#endif
        -:   23:
        -:   24:_LIBCPP_PUSH_MACROS
        -:   25:#include <__undef_macros>
        -:   26:
        -:   27:_LIBCPP_BEGIN_NAMESPACE_STD
        -:   28:
        -:   29:// TODO: Change the name of __unwrap_iter_impl to something more appropriate
        -:   30:// The job of __unwrap_iter is to remove iterator wrappers (like reverse_iterator or __wrap_iter),
        -:   31:// to reduce the number of template instantiations and to enable pointer-based optimizations e.g. in std::copy.
        -:   32://
        -:   33:// Some algorithms (e.g. std::copy, but not std::sort) need to convert an
        -:   34:// "unwrapped" result back into the original iterator type. Doing that is the job of __rewrap_iter.
        -:   35:
        -:   36:// Default case - we can't unwrap anything
        -:   37:template <class _Iter, bool = __libcpp_is_contiguous_iterator<_Iter>::value>
        -:   38:struct __unwrap_iter_impl {
        -:   39:  static _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _Iter __rewrap(_Iter, _Iter __iter) { return __iter; }
        -:   40:  static _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _Iter __unwrap(_Iter __i) _NOEXCEPT { return __i; }
        -:   41:};
        -:   42:
        -:   43:// TODO(hardening): make sure that the following unwrapping doesn't unexpectedly turn hardened iterators into raw
        -:   44:// pointers.
        -:   45:
        -:   46:// It's a contiguous iterator, so we can use a raw pointer instead
        -:   47:template <class _Iter>
        -:   48:struct __unwrap_iter_impl<_Iter, true> {
        -:   49:  using _ToAddressT = decltype(std::__to_address(std::declval<_Iter>()));
        -:   50:
function _ZNSt3__118__unwrap_iter_implIPNS_4pairIPvmEELb1EE8__rewrapB8ne180100ES4_S4_ called 14 returned 100% blocks executed 100%
       14:   51:  static _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _Iter __rewrap(_Iter __orig_iter, _ToAddressT __unwrapped_iter) {
       14:   52:    return __orig_iter + (__unwrapped_iter - std::__to_address(__orig_iter));
       14:   52-block  0
        -:   53:  }
        -:   54:
function _ZNSt3__118__unwrap_iter_implIPNS_4pairIPvmEELb1EE8__unwrapB8ne180100ES4_ called 21 returned 100% blocks executed 100%
       21:   55:  static _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _ToAddressT __unwrap(_Iter __i) _NOEXCEPT {
       21:   56:    return std::__to_address(__i);
       21:   56-block  0
        -:   57:  }
        -:   58:};
        -:   59:
        -:   60:template <class _Iter,
        -:   61:          class _Impl                                             = __unwrap_iter_impl<_Iter>,
        -:   62:          __enable_if_t<is_copy_constructible<_Iter>::value, int> = 0>
        -:   63:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX14 decltype(_Impl::__unwrap(std::declval<_Iter>()))
function _ZNSt3__113__unwrap_iterB8ne180100IPNS_4pairIPvmEENS_18__unwrap_iter_implIS4_Lb1EEELi0EEEDTclsrT0_8__unwrapclsr3stdE7declvalIT_EEEES8_ called 21 returned 100% blocks executed 100%
       21:   64:__unwrap_iter(_Iter __i) _NOEXCEPT {
       21:   65:  return _Impl::__unwrap(__i);
       21:   65-block  0
        -:   66:}
        -:   67:
        -:   68:// Allow input_iterators to be passed to __unwrap_iter (but not __rewrap_iter)
        -:   69:#if _LIBCPP_STD_VER >= 20
        -:   70:template <class _Iter, __enable_if_t<!is_copy_constructible<_Iter>::value, int> = 0>
        -:   71:inline _LIBCPP_HIDE_FROM_ABI constexpr _Iter __unwrap_iter(_Iter __i) noexcept {
        -:   72:  return __i;
        -:   73:}
        -:   74:#endif
        -:   75:
        -:   76:template <class _OrigIter, class _Iter, class _Impl = __unwrap_iter_impl<_OrigIter> >
function _ZNSt3__113__rewrap_iterB8ne180100IPNS_4pairIPvmEES4_NS_18__unwrap_iter_implIS4_Lb1EEEEET_S7_T0_ called 14 returned 100% blocks executed 66%
       14:   77:_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _OrigIter __rewrap_iter(_OrigIter __orig_iter, _Iter __iter) _NOEXCEPT {
       14:   78:  return _Impl::__rewrap(std::move(__orig_iter), std::move(__iter));
       14:   78-block  0
branch  0 taken 14
branch  1 taken 0
       14:   78-block  1
    $$$$$:   78-block  2
        -:   79:}
        -:   80:
        -:   81:_LIBCPP_END_NAMESPACE_STD
        -:   82:
        -:   83:_LIBCPP_POP_MACROS
        -:   84:
        -:   85:#endif // _LIBCPP___ALGORITHM_UNWRAP_ITER_H
